{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

@Callable(i)
func enrollEmpPay(employee: String, empId: String,  amount: Int, description: String) = {
    if (this == i.caller && !isDefined(getBoolean(this, employee + "_state"))) then {
        WriteSet([
            DataEntry(employee + "_state", "enrolled"),
            DataEntry(employee + "_id", empId),
            DataEntry(employee + "_amount", amount),
            DataEntry(employee + "_description", description),
            DataEntry(employee + "_enrolledBy", toBase58String(i.caller.bytes))
        ])
    }else {
        throw("Pay for " + employee + " has already been enrolled or caller is not dApp owner")
    }
}

@Callable(i)
func payEmp(employee: String) = {

    let callerStr = toBase58String(i.caller.bytes)

    let status = match( this.getString(employee + "_status")){
        case x: Unit => "unset"
        case x: String => x
    }
    let amount = this.getInteger(employee + "_amount").extract()

    if (status == "enrolled") then {
        ScriptResult(
            WriteSet([
                DataEntry(employee + "_paidBy", callerStr)
            ]),
            TransferSet([ScriptTransfer(Address(employee.toBytes()), amount, unit)])
        )
    }else throw("Employee not enrolled")

}

@Verifier(tx)
func verify() = true
